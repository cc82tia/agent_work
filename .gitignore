# --- Secrets / 個人環境 ---
.env
.env.*        # 例: .env.bak, .env.local
!.env.sample  # サンプルは残す

# .env.variables 配下は原則コミットしない（.keep と *.sample だけ許可）
.env.variables/*
!.env.variables/.keep
!.env.variables/*.sample

# OAuth/Token/鍵
tokens/
.tokens/
**/*token*.json
**/*oauth*client*.json
**/*private*key*.pem
**/*private*key*.key

# --- Python ビルド/キャッシュ ---
__pycache__/
*.py[cod]
*.pyo
.pytest_cache/
.mypy_cache/
.ruff_cache/
.ipynb_checkpoints/

# --- 仮想環境 ---
llm-env/
.venv/
venv/
.envrc
.python-version

# --- ログ/一時ファイル ---
*.log
logs/
tmp/
*.tmp
*.swp
.DS_Store

# --- VSCode/IDE ---
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
.idea/

# --- テスト生成物/カバレッジ ---
.coverage
coverage.xml
htmlcov/
__pycache__/
llm-env/
.env
.env.variables/
*.key
*.json

doc/
# --- virtualenvs (必ず無視) ---
win-venv/
llm-env/
.venv/
venv/

# ignore docs & venvs
doc/
win-venv/
.venv/
venv/
llm-env/
cloudflared.deb
# Byte-compiled / optimized / DLL files
agent_work/__pycache__/
agent_work/*.py[codz]
agent_work/*$py.class

# C extensions
agent_work/*.so

# Distribution / packaging
agent_work/.Python
agent_work/build/
agent_work/develop-eggs/
agent_work/dist/
agent_work/downloads/
agent_work/eggs/
agent_work/.eggs/
agent_work/lib/
agent_work/lib64/
agent_work/parts/
agent_work/sdist/
agent_work/var/
agent_work/wheels/
agent_work/share/python-wheels/
agent_work/*.egg-info/
agent_work/.installed.cfg
agent_work/*.egg
agent_work/MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
agent_work/*.manifest
agent_work/*.spec

# Installer logs
agent_work/pip-log.txt
agent_work/pip-delete-this-directory.txt

# Unit test / coverage reports
agent_work/htmlcov/
agent_work/.tox/
agent_work/.nox/
agent_work/.coverage
agent_work/.coverage.*
agent_work/.cache
agent_work/nosetests.xml
agent_work/coverage.xml
agent_work/*.cover
agent_work/*.py.cover
agent_work/.hypothesis/
agent_work/.pytest_cache/
agent_work/cover/

# Translations
agent_work/*.mo
agent_work/*.pot

# Django stuff:
agent_work/*.log
agent_work/local_settings.py
agent_work/db.sqlite3
agent_work/db.sqlite3-journal

# Flask stuff:
agent_work/instance/
agent_work/.webassets-cache

# Scrapy stuff:
agent_work/.scrapy

# Sphinx documentation
agent_work/docs/_build/

# PyBuilder
agent_work/.pybuilder/
agent_work/target/

# Jupyter Notebook
agent_work/.ipynb_checkpoints

# IPython
agent_work/profile_default/
agent_work/ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
agent_work/.pdm-python
agent_work/.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
agent_work/.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
agent_work/__pypackages__/

# Celery stuff
agent_work/celerybeat-schedule
agent_work/celerybeat.pid

# SageMath parsed files
agent_work/*.sage.py

# Environments
agent_work/.env
agent_work/.envrc
agent_work/.venv
agent_work/env/
agent_work/venv/
agent_work/ENV/
agent_work/env.bak/
agent_work/venv.bak/

# Spyder project settings
agent_work/.spyderproject
agent_work/.spyproject

# Rope project settings
agent_work/.ropeproject

# mkdocs documentation
agent_work//site

# mypy
agent_work/.mypy_cache/
agent_work/.dmypy.json
agent_work/dmypy.json

# Pyre type checker
agent_work/.pyre/

# pytype static type analyzer
agent_work/.pytype/

# Cython debug symbols
agent_work/cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
agent_work/.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
agent_work/.ruff_cache/

# PyPI configuration file
agent_work/.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
agent_work/.cursorignore
agent_work/.cursorindexingignore

# Marimo
agent_work/marimo/_static/
agent_work/marimo/_lsp/
agent_work/__marimo__/


agent_work/doc/
